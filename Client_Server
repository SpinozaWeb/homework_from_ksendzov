Client_Server
1) Прочитать про клиент-серверную архитектуру

«Клиент — сервер» (англ. client–server) — вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, 
называемыми серверами, и заказчиками услуг, называемыми клиентами. Фактически клиент и сервер — это программное обеспечение. 
Обычно эти программы расположены на разных вычислительных машинах и взаимодействуют между собой через вычислительную сеть посредством сетевых протоколов, 
но они могут быть расположены также и на одной машине. Программы-серверы ожидают от клиентских программ запросы и предоставляют им свои ресурсы в виде данных
 (например, передача файлов посредством HTTP, FTP, BitTorrent, потоковое мультимедиа или работа с базами данных) или в виде сервисных функций 
 (например, работа с электронной почтой, общение посредством систем мгновенного обмена сообщениями или просмотр web-страниц во всемирной паутине). 
 Поскольку одна программа-сервер может выполнять запросы от множества программ-клиентов, её размещают на специально выделенной вычислительной машине, 
 настроенной особым образом, как правило, совместно с другими программами-серверами, поэтому производительность этой машины должна быть высокой. 
 Из-за особой роли такой машины в сети, специфики её оборудования и программного обеспечения, её также называют сервером, 
 а машины, выполняющие клиентские программы, соответственно, клиентами.
 
2) Что такое HTTP и HTTPS

HTTPS и HTTP – два протокола, с помощью которых передается информация в Интернете. Они предназначены для передачи текстовых данных между клиентом и сервером, 
а главное различие между ними – в наличии и отсутствии шифрования передаваемых данных.
Важной задачей владельца сайта является обеспечение безопасности при передаче информации и ее сохранности. Передача данных по протоколу HTTPS является таким решением.

3) HTTP методы

Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. 
Обычно метод представляет собой короткое английское слово, записанное заглавными буквами.
HTTP методы:
Метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.
POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT заменяет все текущие представления ресурса данными запроса.
DELETE удаляет указанный ресурс.
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS используется для описания параметров соединения с ресурсом.
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH используется для частичного изменения ресурса.

4) HTTP статус коды сервера

Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы в 5 классов:

1.Информационные 100 - 199
2.Успешные 200 - 299
3.Перенаправления 300 - 399
4.Клиентские ошибки 400 - 499
5.Серверные ошибки 500 - 599

https://developer.mozilla.org/ru/docs/Web/HTTP/Status

5) Что такое ядро браузера 

Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS. 
Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и тд), организацию инфрмации (направление, добавление CSS и тд) и 
расчет режима отображения веб-страницы, а затем вывод ее на монитор и принтер. 
Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга будет другим. 
Ядра браузера можно разделить на пять типов: Trident, Gecko, Presto, Webkit, Blink.

6) Какие браузеры какиие ядра используют

Trident - IE 9 и ниже
Gecko - Firefox
Presto - Opera 12.17 и ниже и сейчас не используется
Blink - Chrome, Opera, Microsoft Edge
WebKit - Safari 

7) Что такое API
Аббревиатура API расшифровывается как «Application Programming Interface» (интерфейс программирования приложений, программный интерфейс приложения)
https://habr.com/ru/post/464261/

8. Что такое ендпоинты

Эндпоинт (Endpoint - конечная точка) — это само обращение к маршруту отдельным HTTP методом. 
Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.

Каждый api-сервис имеет endpoint, к которому и нужно обращаться, например отправлять http-запрос. Обычно это url. 
Т.о. endpoint - это url. Или такая. url включает в себя маршрут (основная часть адреса сервиса) и endpoint (часть url, 
которая содержит например имя вызываемого метода). Существует один маршрут и у него несколько эндпоинтов. Т.о. здесь endpoint - это только часть url.


9) URL (URI, URL, URN)

Расшифровка аббревиатур
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
URN - Unifrorm Resource Name (унифицированное имя ресурса)
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
Внимание! Далее в мелочах кроется истина, и пока ничего не понятно, - какая-то каша, но, едем дальше.

В чем различия
URL: Исторически возник самым первым из понятий и закрепился как синоним термина веб-адрес. URL определяет местонахождение ресурса 
в сети и способ его (ресурса) извлечения.
Это позволяет нам полностью узнать: как, кому и где можно достать требуемый ресурс, вводя понятия схемы, данных авторизации и местонахождения.

URN: Неизменяемая последовательность символов определяющая только имя некоторого ресурса. Смысл URN в том, что им единоразово и 
уникально именуется какая-либо сущность в рамках конкретного пространства имен (контекста), либо без пространства имен, 
в общем (что не желательно). Таким образом, URN способен преодолеть недостаток URL связанный с возможным будущим изменением и перемещением ссылок,
однако, теперь для того, чтобы знать местонахождение URN ресурса необходимо обращаться к системе разрешения имен URN, в которой он должен быть зарегистрирован.

URI: Это лишь обобщенное понятие (множество) идентификации ресурса, включающее в нашем случае как URL, так и URN, как по отдельности, так и совместно. 
Т.е. мы можем считать, что: URI = URL или URI = URN или URI = URL + URN

Подведем итоги
URI - это абстракция концепции идентификации,
а URL и URN - это конкретные реализации - полного адреса ресурса и уникального контекстного имени соответственно.

10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, 
не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), 
кроме сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. 
Также все безопасные методы являются идемпотентными.

11) Безопасные HTTP методы

https://developer.mozilla.org/ru/docs/Glossary/safe
Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only).
Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS
Даже если безопасные методы являются по существу "только для чтения", сервер всё равно может сменить своё состояние: 
например, он может сохранять статистику. Что существенно, так то, когда клиент вызывает безопасный метод, то он не запрашивает никаких изменений на сервере, 
и поэтому не создаёт дополнительную нагрузку на сервер. Браузеры могут вызывать безопасные методы, не опасаясь причинить вред серверу: 
это позволяет им выполнять некоторые действия, например, предварительная загрузка без риска. Поисковые роботы также полагаются на вызовы безопасных методов.

12) Иденфикация, Аутентификация, Авторизация

Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в
информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, 
сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.

Выше было очень много умных слов, теперь давайте упростим до конкретных примеров. Скажем, пользователь хочет войти в свой аккаунт Google. Google подходит лучше всего, потому что там процедура входа явным образом разбита на несколько простейших этапов. Вот что при этом происходит:
Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация.
После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, 
раз пароль совпал, — это аутентификация.Скорее всего, Google дополнительно спросит еще и одноразовый код из SMS или приложения. 
Если пользователь и его правильно введет, то система окончательно согласится с тем, что он настоящий владелец аккаунта, — это двухфакторная аутентификация.
После этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.
Аутентификация без предварительной идентификации лишена смысла — пока система не поймет, подлинность чего же надо проверять, 
совершенно бессмысленно начинать проверку. Для начала надо представиться.
Идентификация без аутентификации — это просто глупо. Потому что мало ли кто ввел существующий в системе логин! 
Системе обязательно надо удостовериться, что этот кто-то знает еще и пароль. Но пароль могли подсмотреть или подобрать, 
поэтому лучше подстраховаться и спросить что-то дополнительное, что может быть известно только данному пользователю: 
например, одноразовый код для подтверждения входа.
А вот авторизация без идентификации и тем более аутентификации очень даже возможна. 
Например, в Google Документах можно публиковать документы так, чтобы они были доступны вообще кому угодно. 
В этом случае вы как владелец файла увидите сверху надпись, гласящую, что его читает неопознанный енот. 
Несмотря на то, что енот совершенно неопознанный, система его все же авторизовала — то есть выдала право прочитать этот документ.
А вот если бы вы открыли этот документ для чтения только определенным пользователям, 
то еноту в таком случае сперва пришлось бы идентифицироваться (ввести свой логин), 
потом аутентифицироваться (ввести пароль и одноразовый код) и только потом получить право на чтение документа — авторизоваться.
А уж если речь идет о содержимом вашего почтового ящика, то Google никогда и ни за что не авторизует неопознанного енота на чтение вашей переписки — если, 
конечно, он не идентифицируется с вашим логином и не аутентифицируется с вашим паролем. Но тогда это уже не будет неопознанный енот, 
поскольку Google однозначно определит этого енота как вас.


13) Что такое IP

IP (Internet Protocol)-адрес – это уникальный идентификатор сетевого узла в публичной или частной компьютерной сети, 
которая построена на базе стека протоколов TCP/IP. Это адрес компьютера, сервера или ещё какого-нибудь сетевого оборудования. 
Служит для того, чтобы упорядочить устройства в сети. Что-то вроде адреса на карте (страна, область, город, улица, дом) или телефонного номера. 
Нужно же понимать, кому отправляете посылку/письмо или дозваниваетесь, верно? Вот в компьютерных сетях для идентификации любых сетевых узлов используются IP-адреса, 
чтобы было понятно, куда отправлять запрос, откуда он пришёл, где находится узел, к чему относится и т. д.

14) Что такое октаты в DNS

Каждый DNS сервер имеет ip адрес. На текущий момент исполюзуется IP v4.
IP-адрес состоит из четырех частей, записанных в виде десятичных чисел с точками (например, 192.168.1.1). 
Каждую из этих четырех частей называют октетом. Октет представляет собой восемь двоичных цифр (например, 11000000, или 192 в десятичном виде).
Таким образом, каждый октет может принимать в двоичном виде значения от 00000000 до 11111111, или от 0 до 255 в десятичном виде.


15) Что такое порт, сколько портов у Linux сервера
Порт сервера- это цифровой идентификатор (набор цыфр до 16 Бит) программы, 
которая используется для создания определенного интернет соединения привязанного к IP- адресу.

Количество портов ограничено с учётом 16-битной адресации (216=65536, начало — «0»). Все порты разделены на три диапазона — общеизвестные (или системные, 0—1023), 
зарегистрированные (или пользовательские, 1024—49151) и динамические (или частные, 49152—65535).
ИТОГО есть 65536 портов у любого сервера Linux. Но есть момент - не все из них могут быть открыты для работы.

16) Уровни OSI

1-й уровень. Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. 
На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. 
Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.

2-й уровень. Канальный (data link). PDU - кадр (frame). На этом уровне появляется адресация. Адресом является MAC адрес. 
Канальный уровень ответственен за доставку кадров адресату и их целостность. В привычных нам сетях на канальном уровне работает протокол ARP. 
Адресация второго уровня работает только в пределах одного сетевого сегмента и ничего не знает о маршрутизации - этим занимается вышестоящий уровень. 
Соответственно, устройства, работающие на L2 - коммутаторы, мосты и драйвер сетевого адаптера.

3-й уровень. Сетевой (network). PDU пакет (packet). Наиболее распространенным протоколом (дальше не буду говорить про “наиболее распространенный” - 
статья для новичков и с экзотикой они, как правило,  не сталкиваются) тут является IP. Адресация происходит по IP-адресам, которые состоят из 32 битов. 
Протокол маршрутизируемый, то есть пакет способен попасть в любую часть сети через какое-то количество маршрутизаторов. На L3 работают маршрутизаторы.

4-й уровень. Транспортный (transport). PDU сегмент (segment)/датаграмма (datagram). На этом уровне появляются понятия портов. Тут трудятся TCP и UDP. 
Протоколы этого уровня отвечают за прямую связь между приложениями и за надежность доставки информации. 
Например, TCP умеет запрашивать повтор передачи данных в случае, если данные приняты неверно или не все. 
Так же TCP может менять скорость передачи данных, если сторона приема не успевает принять всё (TCP Window Size).

Следующие уровни “правильно” реализованы лишь в RFC. На практике же, протоколы описанные на следующих уровнях работают одновременно на 
нескольких уровнях модели OSI, поэтому нет четкого разделения на сеансовый и представительский уровни. В связи с этим в настоящее время основным 
используемым стеком является TCP/IP, о котором поговорим чуть ниже.

5-й уровень. Сеансовый (session). PDU данные (data). Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.

6-й уровень. Представительский (presentation). PDU данные (data). Преставление и шифрование данных. JPEG, ASCII, MPEG.

7-й уровень. Прикладной (application). PDU данные (data). Самый многочисленный и разнообразный уровень. 
На нем выполняются все высокоуровненвые протоколы. Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или
гарантии доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных действий, 
например получение html-кода или email-сообщения конкретному адресату.



17) Хедеры http запросов

Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. 
В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение. Пробелы перед значением игнорируются.
https://developer.mozilla.org/ru/docs/Web/HTTP/Headers
